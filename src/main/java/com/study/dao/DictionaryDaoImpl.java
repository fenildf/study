package com.study.dao;import java.sql.SQLException;import java.util.List;import javax.annotation.Resource;import org.hibernate.HibernateException;import org.hibernate.Query;import org.hibernate.Session;import org.hibernate.SessionFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.orm.hibernate3.HibernateCallback;import org.springframework.orm.hibernate3.HibernateTemplate;import org.springframework.stereotype.Repository;import com.study.dao.base.AbstractBaseORMDao;import com.study.model.Dictionary;@Repository("dictionaryDao")public class DictionaryDaoImpl extends AbstractBaseORMDao<Dictionary, Long> implements IDictionaryDao {	private static final long serialVersionUID = 2725175497706339564L;	@Autowired	private HibernateTemplate hibernateTemplate;	@Resource(name = "sessionFactory")	public void setSuperSessionFactory(SessionFactory sessionFactory) {		super.setSessionFactory(sessionFactory);	}	@Override	public Dictionary getByWord(final String word) {		String sql = "From Dictionary where word = ?";		@SuppressWarnings("unchecked")		List<Dictionary> list = hibernateTemplate.find(sql, new String[]{word});		return list.size() > 0 ? list.get(0) : null;	}	public List<Dictionary> list(final int page, final int size) {		return getHibernateTemplate().execute(new HibernateCallback<List<Dictionary>>() {			public List<Dictionary> doInHibernate(Session session) throws HibernateException, SQLException {				StringBuffer sb = new StringBuffer("from Dictionary as t where 1=1");				// if (askerId!=null) {				// sb.append(" and asker.id = :askerId");				// }				// if (StringUtils.isNotBlank(askerTelphone)) {				// sb.append(" and askerTelphone = :askerTelphone");				// }				// if (respondentId!=null) {				// sb.append(" and respondent.id = :respondentId");				// }				Query query = session.createQuery(sb.toString());				// if (askerId!=null) {				// query.setParameter("askerId", askerId);				// }				// if (StringUtils.isNotBlank(askerTelphone)) {				// query.setParameter("askerTelphone", askerTelphone);				// }				// if (respondentId!=null) {				// query.setParameter("respondentId", respondentId);				// }				// 从第几行开始				query.setFirstResult(page);				// 每页显示多少条记录				query.setMaxResults(size);				return (List<Dictionary>) query.list();			}		});	}		public int count(){        Long count = getHibernateTemplate().execute(new HibernateCallback<Long>() {            public Long doInHibernate(org.hibernate.Session s) throws HibernateException, SQLException {                Query query = null;                StringBuffer sb = new StringBuffer("select count(*) from Dictionary");                query = s.createQuery(sb.toString());                return (Long) query.uniqueResult();            }        });        return count.intValue();	}}